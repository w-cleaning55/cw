"use strict";exports.id=9892,exports.ids=[9892],exports.modules={79892:(a,b,c)=>{class d{async initialize(a){try{switch(this.config=a,a.type){case"firebase":let{FirebaseDatabase:b}=await c.e(4016).then(c.bind(c,14016));this.currentProvider=new b(a.config);break;case"supabase":let{SupabaseDatabase:d}=await c.e(9951).then(c.bind(c,29951));this.currentProvider=new d(a.config);break;case"mongodb":let{MongoDatabase:e}=await c.e(1999).then(c.bind(c,91999));this.currentProvider=new e(a.config);break;default:throw Error(`Unsupported database type: ${a.type}`)}let f=await this.currentProvider.connect();return f?(a.connectionStatus="connected",a.lastTested=new Date().toISOString()):a.connectionStatus="error",f}catch(a){return console.error("Database initialization failed:",a),this.config&&(this.config.connectionStatus="error"),!1}}async testConnection(){if(!this.currentProvider)return!1;try{let a=await this.currentProvider.testConnection();return this.config&&(this.config.connectionStatus=a?"connected":"error",this.config.lastTested=new Date().toISOString()),a}catch(a){return console.error("Database connection test failed:",a),this.config&&(this.config.connectionStatus="error"),!1}}async switchDatabase(a){if(this.currentProvider&&this.config?.type!=="json")try{await this.currentProvider.backup(),console.log("Database backup created before switching")}catch(a){console.warn("Failed to create backup:",a)}return this.currentProvider&&await this.currentProvider.disconnect(),await this.initialize(a)}async create(a,b){if(!this.currentProvider)throw Error("Database not initialized");return await this.currentProvider.create(a,b)}async read(a,b){if(!this.currentProvider)throw Error("Database not initialized");return await this.currentProvider.read(a,b)}async update(a,b,c){if(!this.currentProvider)throw Error("Database not initialized");return await this.currentProvider.update(a,b,c)}async delete(a,b){if(!this.currentProvider)throw Error("Database not initialized");return await this.currentProvider.delete(a,b)}async query(a,b){if(!this.currentProvider)throw Error("Database not initialized");return await this.currentProvider.query(a,b)}async count(a,b){if(!this.currentProvider)throw Error("Database not initialized");return await this.currentProvider.count(a,b)}getCurrentConfig(){return this.config}isConnected(){return this.config?.connectionStatus==="connected"}constructor(){this.currentProvider=null,this.config=null}}new d}};
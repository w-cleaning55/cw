"use strict";exports.id=9951,exports.ids=[9951],exports.modules={29951:(a,b,c)=>{c.d(b,{SupabaseDatabase:()=>d});class d{constructor(a){this.client=null,this.config=a}async connect(){try{try{let{createClient:a}=await Promise.resolve().then(function(){var a=Error("Cannot find module '@supabase/supabase-js'");throw a.code="MODULE_NOT_FOUND",a});return this.client=a(this.config.url,this.config.anonKey||this.config.serviceKey),!0}catch(a){return console.warn("Supabase package not installed. Install with: npm install @supabase/supabase-js"),!1}}catch(a){return console.error("Supabase connection failed:",a),!1}}async disconnect(){this.client=null}async testConnection(){try{if(!this.client)return!1;let{data:a,error:b}=await this.client.auth.getSession();return!b||"Network request failed"!==b.message}catch(a){return console.error("Supabase connection test failed:",a),!1}}async create(a,b){try{let c={...b,created_at:b.createdAt||new Date().toISOString(),updated_at:new Date().toISOString()};Object.keys(c).forEach(a=>{void 0===c[a]&&delete c[a]});let{data:d,error:e}=await this.client.from(a).insert([c]).select().single();if(e)throw console.error("Supabase create error:",e),Error(`Supabase create failed: ${e.message}`);return d}catch(a){throw console.error("Supabase create failed:",a),a}}async read(a,b){try{if(b){let{data:c,error:d}=await this.client.from(a).select("*").eq("id",b).single();if(d&&"PGRST116"!==d.code)throw Error(`Supabase read failed: ${d.message}`);return c||null}{let{data:b,error:c}=await this.client.from(a).select("*");if(c)throw Error(`Supabase read failed: ${c.message}`);return{[a]:b||[]}}}catch(a){throw console.error("Supabase read failed:",a),a}}async update(a,b,c){try{let d={...c,updated_at:new Date().toISOString()};Object.keys(d).forEach(a=>{void 0===d[a]&&delete d[a]});let{data:e,error:f}=await this.client.from(a).update(d).eq("id",b).select().single();if(f)throw Error(`Supabase update failed: ${f.message}`);return e}catch(a){throw console.error("Supabase update failed:",a),a}}async delete(a,b){try{let{error:c}=await this.client.from(a).delete().eq("id",b);if(c)return console.error("Supabase delete error:",c),!1;return!0}catch(a){return console.error("Supabase delete failed:",a),!1}}async query(a,b){try{let c=this.client.from(a).select("*");b&&Object.keys(b).forEach(a=>{let d=b[a];if(null!=d)if("_orderBy"===a){let{field:a,direction:b="asc"}=d;c=c.order(a,{ascending:"asc"===b})}else if("_limit"===a)c=c.limit(d);else if("_range"===a){let{from:a,to:b}=d;c=c.range(a,b)}else c="string"==typeof d&&d.includes("%")?c.ilike(a,d):c.eq(a,d)});let{data:d,error:e}=await c;if(e)throw Error(`Supabase query failed: ${e.message}`);return d||[]}catch(a){throw console.error("Supabase query failed:",a),a}}async count(a,b){try{let c=this.client.from(a).select("*",{count:"exact",head:!0});b&&Object.keys(b).forEach(a=>{let d=b[a];null!=d&&"_orderBy"!==a&&"_limit"!==a&&"_range"!==a&&(c="string"==typeof d&&d.includes("%")?c.ilike(a,d):c.eq(a,d))});let{count:d,error:e}=await c;if(e)throw Error(`Supabase count failed: ${e.message}`);return d||0}catch(a){return console.error("Supabase count failed:",a),0}}async backup(){try{let a={};for(let b of["services","bookings","customers","users","messages","notifications"])try{let c=await this.read(b);a[b]=c[b]}catch(c){console.warn(`Failed to backup table ${b}:`,c),a[b]=[]}return a}catch(a){throw console.error("Supabase backup failed:",a),a}}async restore(a){try{for(let[b,c]of Object.entries(a))if(Array.isArray(c)&&c.length>0){let{error:a}=await this.client.from(b).insert(c);if(a)return console.error(`Failed to restore table ${b}:`,a),!1}return!0}catch(a){return console.error("Supabase restore failed:",a),!1}}}}};
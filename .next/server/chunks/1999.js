"use strict";exports.id=1999,exports.ids=[1999],exports.modules={91999:(a,b,c)=>{c.d(b,{MongoDatabase:()=>d});class d{constructor(a){this.client=null,this.db=null,this.config=a}async connect(){try{try{let{MongoClient:a}=await Promise.resolve().then(function(){var a=Error("Cannot find module 'mongodb'");throw a.code="MODULE_NOT_FOUND",a}),b=this.config.connectionString||`mongodb://${this.config.username}:${this.config.password}@${this.config.host}:${this.config.port}/${this.config.database}`;return this.client=new a(b,{maxPoolSize:10,serverSelectionTimeoutMS:5e3,socketTimeoutMS:45e3}),await this.client.connect(),this.db=this.client.db(this.config.database),!0}catch(a){return console.warn("MongoDB package not installed. Install with: npm install mongodb"),!1}}catch(a){return console.error("MongoDB connection failed:",a),!1}}async disconnect(){try{this.client&&(await this.client.close(),this.client=null,this.db=null)}catch(a){console.error("MongoDB disconnect failed:",a)}}async testConnection(){try{if(!this.db)return!1;return await this.db.admin().ping(),!0}catch(a){return console.error("MongoDB connection test failed:",a),!1}}async create(a,b){try{let{ObjectId:c}=await Promise.resolve().then(function(){var a=Error("Cannot find module 'mongodb'");throw a.code="MODULE_NOT_FOUND",a}),d={...b,_id:b.id?b.id:new c,createdAt:b.createdAt||new Date,updatedAt:new Date},e=await this.db.collection(a).insertOne(d);return{id:e.insertedId.toString(),...d,_id:e.insertedId}}catch(a){throw console.error("MongoDB create failed:",a),a}}async read(a,b){try{if(b){let{ObjectId:c}=await Promise.resolve().then(function(){var a=Error("Cannot find module 'mongodb'");throw a.code="MODULE_NOT_FOUND",a}),d={};d=c.isValid(b)?{$or:[{id:b},{_id:new c(b)}]}:{id:b};let e=await this.db.collection(a).findOne(d);if(e)return{id:e.id||e._id.toString(),...e,_id:e._id};return null}{let b=await this.db.collection(a).find({}).toArray(),c={};return c[a]=b.map(a=>({id:a.id||a._id.toString(),...a,_id:a._id})),c}}catch(a){throw console.error("MongoDB read failed:",a),a}}async update(a,b,c){try{let{ObjectId:d}=await Promise.resolve().then(function(){var a=Error("Cannot find module 'mongodb'");throw a.code="MODULE_NOT_FOUND",a}),e={};e=d.isValid(b)?{$or:[{id:b},{_id:new d(b)}]}:{id:b};let f={...c,updatedAt:new Date};Object.keys(f).forEach(a=>{void 0===f[a]&&delete f[a]});let g=await this.db.collection(a).findOneAndUpdate(e,{$set:f},{returnDocument:"after"});if(!g.value)throw Error(`Document with id ${b} not found in collection ${a}`);return{id:g.value.id||g.value._id.toString(),...g.value,_id:g.value._id}}catch(a){throw console.error("MongoDB update failed:",a),a}}async delete(a,b){try{let{ObjectId:c}=await Promise.resolve().then(function(){var a=Error("Cannot find module 'mongodb'");throw a.code="MODULE_NOT_FOUND",a}),d={};return d=c.isValid(b)?{$or:[{id:b},{_id:new c(b)}]}:{id:b},(await this.db.collection(a).deleteOne(d)).deletedCount>0}catch(a){return console.error("MongoDB delete failed:",a),!1}}async query(a,b){try{let c={},d={};return b&&Object.keys(b).forEach(a=>{let e=b[a];if(null!=e)if("_orderBy"===a){let{field:a,direction:b="asc"}=e;d.sort={[a]:"asc"===b?1:-1}}else"_limit"===a?d.limit=e:"_skip"===a?d.skip=e:"string"==typeof e&&e.includes("*")?c[a]=RegExp(e.replace(/\*/g,".*"),"i"):("object"==typeof e&&e.hasOwnProperty("$"),c[a]=e)}),(await this.db.collection(a).find(c,d).toArray()).map(a=>({id:a.id||a._id.toString(),...a,_id:a._id}))}catch(a){throw console.error("MongoDB query failed:",a),a}}async count(a,b){try{let c={};return b&&Object.keys(b).forEach(a=>{let d=b[a];null!=d&&"_orderBy"!==a&&"_limit"!==a&&"_skip"!==a&&("string"==typeof d&&d.includes("*")?c[a]=RegExp(d.replace(/\*/g,".*"),"i"):("object"==typeof d&&d.hasOwnProperty("$"),c[a]=d))}),await this.db.collection(a).countDocuments(c)}catch(a){return console.error("MongoDB count failed:",a),0}}async backup(){try{let a=await this.db.listCollections().toArray(),b={};for(let c of a){let a=c.name;if(!a.startsWith("system.")){let c=await this.read(a);b[a]=c[a]}}return b}catch(a){throw console.error("MongoDB backup failed:",a),a}}async restore(a){try{for(let[b,c]of Object.entries(a))Array.isArray(c)&&c.length>0&&await this.db.collection(b).insertMany(c);return!0}catch(a){return console.error("MongoDB restore failed:",a),!1}}}}};
"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3772],{3772:(t,r,e)=>{class i{async initialize(t){try{switch(this.config=t,t.type){case"firebase":let{FirebaseDatabase:r}=await e.e(2190).then(e.bind(e,2190));this.currentProvider=new r(t.config);break;case"supabase":let{SupabaseDatabase:i}=await e.e(1757).then(e.bind(e,1757));this.currentProvider=new i(t.config);break;case"mongodb":let{MongoDatabase:n}=await e.e(1467).then(e.bind(e,1467));this.currentProvider=new n(t.config);break;default:throw Error(`Unsupported database type: ${t.type}`)}let a=await this.currentProvider.connect();return a?(t.connectionStatus="connected",t.lastTested=new Date().toISOString()):t.connectionStatus="error",a}catch(t){return console.error("Database initialization failed:",t),this.config&&(this.config.connectionStatus="error"),!1}}async testConnection(){if(!this.currentProvider)return!1;try{let t=await this.currentProvider.testConnection();return this.config&&(this.config.connectionStatus=t?"connected":"error",this.config.lastTested=new Date().toISOString()),t}catch(t){return console.error("Database connection test failed:",t),this.config&&(this.config.connectionStatus="error"),!1}}async switchDatabase(t){if(this.currentProvider&&this.config?.type!=="json")try{await this.currentProvider.backup(),console.log("Database backup created before switching")}catch(t){console.warn("Failed to create backup:",t)}return this.currentProvider&&await this.currentProvider.disconnect(),await this.initialize(t)}async create(t,r){if(!this.currentProvider)throw Error("Database not initialized");return await this.currentProvider.create(t,r)}async read(t,r){if(!this.currentProvider)throw Error("Database not initialized");return await this.currentProvider.read(t,r)}async update(t,r,e){if(!this.currentProvider)throw Error("Database not initialized");return await this.currentProvider.update(t,r,e)}async delete(t,r){if(!this.currentProvider)throw Error("Database not initialized");return await this.currentProvider.delete(t,r)}async query(t,r){if(!this.currentProvider)throw Error("Database not initialized");return await this.currentProvider.query(t,r)}async count(t,r){if(!this.currentProvider)throw Error("Database not initialized");return await this.currentProvider.count(t,r)}getCurrentConfig(){return this.config}isConnected(){return this.config?.connectionStatus==="connected"}constructor(){this.currentProvider=null,this.config=null}}new i}}]);
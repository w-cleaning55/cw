"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1467],{1467:(t,e,o)=>{o.d(e,{MongoDatabase:()=>n});class n{constructor(t){this.client=null,this.db=null,this.config=t}async connect(){try{try{let{MongoClient:t}=await Promise.resolve().then(function(){var t=Error("Cannot find module 'mongodb'");throw t.code="MODULE_NOT_FOUND",t}),e=this.config.connectionString||`mongodb://${this.config.username}:${this.config.password}@${this.config.host}:${this.config.port}/${this.config.database}`;return this.client=new t(e,{maxPoolSize:10,serverSelectionTimeoutMS:5e3,socketTimeoutMS:45e3}),await this.client.connect(),this.db=this.client.db(this.config.database),!0}catch(t){return console.warn("MongoDB package not installed. Install with: npm install mongodb"),!1}}catch(t){return console.error("MongoDB connection failed:",t),!1}}async disconnect(){try{this.client&&(await this.client.close(),this.client=null,this.db=null)}catch(t){console.error("MongoDB disconnect failed:",t)}}async testConnection(){try{if(!this.db)return!1;return await this.db.admin().ping(),!0}catch(t){return console.error("MongoDB connection test failed:",t),!1}}async create(t,e){try{let{ObjectId:o}=await Promise.resolve().then(function(){var t=Error("Cannot find module 'mongodb'");throw t.code="MODULE_NOT_FOUND",t}),n={...e,_id:e.id?e.id:new o,createdAt:e.createdAt||new Date,updatedAt:new Date},i=await this.db.collection(t).insertOne(n);return{id:i.insertedId.toString(),...n,_id:i.insertedId}}catch(t){throw console.error("MongoDB create failed:",t),t}}async read(t,e){try{if(e){let{ObjectId:o}=await Promise.resolve().then(function(){var t=Error("Cannot find module 'mongodb'");throw t.code="MODULE_NOT_FOUND",t}),n={};n=o.isValid(e)?{$or:[{id:e},{_id:new o(e)}]}:{id:e};let i=await this.db.collection(t).findOne(n);if(i)return{id:i.id||i._id.toString(),...i,_id:i._id};return null}{let e=await this.db.collection(t).find({}).toArray(),o={};return o[t]=e.map(t=>({id:t.id||t._id.toString(),...t,_id:t._id})),o}}catch(t){throw console.error("MongoDB read failed:",t),t}}async update(t,e,o){try{let{ObjectId:n}=await Promise.resolve().then(function(){var t=Error("Cannot find module 'mongodb'");throw t.code="MODULE_NOT_FOUND",t}),i={};i=n.isValid(e)?{$or:[{id:e},{_id:new n(e)}]}:{id:e};let r={...o,updatedAt:new Date};Object.keys(r).forEach(t=>{void 0===r[t]&&delete r[t]});let a=await this.db.collection(t).findOneAndUpdate(i,{$set:r},{returnDocument:"after"});if(!a.value)throw Error(`Document with id ${e} not found in collection ${t}`);return{id:a.value.id||a.value._id.toString(),...a.value,_id:a.value._id}}catch(t){throw console.error("MongoDB update failed:",t),t}}async delete(t,e){try{let{ObjectId:o}=await Promise.resolve().then(function(){var t=Error("Cannot find module 'mongodb'");throw t.code="MODULE_NOT_FOUND",t}),n={};return n=o.isValid(e)?{$or:[{id:e},{_id:new o(e)}]}:{id:e},(await this.db.collection(t).deleteOne(n)).deletedCount>0}catch(t){return console.error("MongoDB delete failed:",t),!1}}async query(t,e){try{let o={},n={};return e&&Object.keys(e).forEach(t=>{let i=e[t];if(null!=i)if("_orderBy"===t){let{field:t,direction:e="asc"}=i;n.sort={[t]:"asc"===e?1:-1}}else"_limit"===t?n.limit=i:"_skip"===t?n.skip=i:"string"==typeof i&&i.includes("*")?o[t]=RegExp(i.replace(/\*/g,".*"),"i"):("object"==typeof i&&i.hasOwnProperty("$"),o[t]=i)}),(await this.db.collection(t).find(o,n).toArray()).map(t=>({id:t.id||t._id.toString(),...t,_id:t._id}))}catch(t){throw console.error("MongoDB query failed:",t),t}}async count(t,e){try{let o={};return e&&Object.keys(e).forEach(t=>{let n=e[t];null!=n&&"_orderBy"!==t&&"_limit"!==t&&"_skip"!==t&&("string"==typeof n&&n.includes("*")?o[t]=RegExp(n.replace(/\*/g,".*"),"i"):("object"==typeof n&&n.hasOwnProperty("$"),o[t]=n))}),await this.db.collection(t).countDocuments(o)}catch(t){return console.error("MongoDB count failed:",t),0}}async backup(){try{let t=await this.db.listCollections().toArray(),e={};for(let o of t){let t=o.name;if(!t.startsWith("system.")){let o=await this.read(t);e[t]=o[t]}}return e}catch(t){throw console.error("MongoDB backup failed:",t),t}}async restore(t){try{for(let[e,o]of Object.entries(t))Array.isArray(o)&&o.length>0&&await this.db.collection(e).insertMany(o);return!0}catch(t){return console.error("MongoDB restore failed:",t),!1}}}}}]);